name: Python application

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v1
      with:
        python-version: 3.6

    - name: Set environment variables
      run: |
        echo "::set-env name=EDM_FULL::2.5.0"
        echo "::set-env name=EDM_X_Y::2.5"
        if [ runner.os == 'Linux' ]; then
          echo "::set-env name=EDM_INSTALLER_PREFIX::edm_cli_"
          echo "::set-env name=EDM_OS::rh6_x86_64"
          echo "::set-env name=EDM_INSTALLER_SUFFIX::_linux_x86_64.sh"
        elif [ runner.os == 'macOS' ]; then
          echo "::set-env name=EDM_INSTALLER_PREFIX::edm_"
          echo "::set-env name=EDM_OS::osx_x86_64"
          echo "::set-env name=EDM_INSTALLER_SUFFIX::_osx_x86_64.pkg"
        fi

    - name: Install X-Server and LibGLU
      run: |
        if [ runner.os == 'Linux' ]; then
          sudo apt-get update
          sudo apt-get install --yes xserver-xorg libglu1-mesa-dev mesa-common-dev libxcb-icccm4 libxkbcommon-x11-0
        fi
        sudo /usr/bin/X :0&
        export DISPLAY=:0

    - name: Install EDM
      run: |
        export EDM_INSTALLER=${EDM_INSTALLER_PREFIX}${EDM_FULL}${EDM_INSTALLER_SUFFIX}
        wget https://package-data.enthought.com/edm/${EDM_OS}/${EDM_X_Y}/${EDM_INSTALLER}
        if [ runner.os == 'Linux' ]; then
          bash ./${EDM_INSTALLER} -b -f -p $HOME
          export PATH=${HOME}/edm/bin:${PATH}
        elif [ runner.os == 'macOS' ]; then
          sudo installer -pkg ./${EDM_INSTALLER} -target
          export PATH="${PATH}:/usr/local/bin"
        fi
        echo "::add-path::/home/runner/bin"
        echo "::set-env name=ETS_TOOLKIT::qt4"

    - name: Build EDM environment
      run: |
        edm install --version 3.6 -y click setuptools
        edm run -- python -m ci build-env

    - name: Install dependencies and package
      run: |
        edm run -- python -m ci install

    - name: Test with unittest
      run: |
        edm run -- python -m ci test

    - name: Run coverage
      if: runner.os == 'Linux'
      run: |
        edm run -- python -m ci coverage

    - name: Archive code coverage results
      uses: actions/upload-artifact@v2
      if: runner.os == 'Linux'
      with:
        name: code-coverage-report
        path: htmlcov/

    - name: Lint with flake8
      run: |
        edm run -- python -m ci flake8

    - name: Perform integration test
      run: |
        edm run -- python -m ci shell
        edm run -e pyfibre-py36 -- PyFibre --test
